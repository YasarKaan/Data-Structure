import java.util.Arrays;

public class Heap {
    private int capacity=10;
    private int size;
    int[] items= new int[capacity];

    private int getLeftChild  (int parentindex) {return 2*parentindex+1;}
    private int getRightChild (int parentindex) {return 2*parentindex+2;}
    private int getParentindex(int childindex)  {return (childindex-1)/2;}

    private boolean hasLeftChild (int index){ return getLeftChild(index)<size; }
    private boolean hasRightChild(int index){ return getRightChild(index)>size;}
    private boolean hasParent    (int index){ return getParentindex(index)>=0; }

    private int leftChild (int index){return items[getLeftChild(index)];  }
    private int rightChild(int index){return items[getRightChild(index)]; }
    private int parent    (int index){return items[getParentindex(index)];}

    private void ensureCapacity(){
        if(size==capacity){
            capacity=capacity+1;
            items= Arrays.copyOf(items,capacity);
        }
    }
    private void swap(int indexOne,int indexTwo){
        int twp=items[indexOne];
        items[indexOne]=items[indexTwo];
        items[indexTwo]=twp;
    }
    public void heapifyUp(){
        int last = size-1;
        while(hasParent(last) && parent(last)>items[last]){
            swap(getParentindex(last),last);
            last=getParentindex(last);
        }
    }
    public void heapifyDown(){
        int index=0;
        while(hasLeftChild(index)){
            int smallerChildIndex=getLeftChild(index);
            if(hasRightChild(index)&&rightChild(index)<leftChild(index)){
                smallerChildIndex = getRightChild(index);
            }
            if(items[index]<items[smallerChildIndex]){
                break;
            }
            else{
                swap(index,smallerChildIndex);
            }
            index=smallerChildIndex;
        }
    }
    public int peek(){
        if (size==0) throw new IllegalStateException();
        return items[0];
    }
    public void add(int item){
        ensureCapacity();
        items[size]=item;
        size++;
        heapifyUp();
    }
    public int delete(){
        if (size==0) throw new IllegalStateException();
        int item=items[0];
        items[0]=items[size-1];
        size--;
        heapifyDown();
        return item;
    }

}
