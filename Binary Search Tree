import java.util.NoSuchElementException;

public class BST<T extends Comparable> {
    private class Node<T>{
        T data;
        int amount;
        Node leftchild;
        Node rightchild;
        public Node(T dataportion,int initamount){
            data=dataportion;
            amount=initamount;
        }
        public String toString(){
            return " " +amount;
        }
    }
    Node root;
    int size;
    public T insert(T newEntry,int amount){
        T result = null;
        Node node=new Node(newEntry,amount);
        node.data=newEntry;
        if(size==0){
               root=node;
        }
        else{
            insertentry(root,newEntry,amount);
        }
        size++;
        return result;
    }
    private T insertentry(Node r,T newEntry,int amount){
        assert r !=null;
        T result = null;
        if(r.amount==amount){
            result= (T) r;
            r=new Node<>(newEntry,amount);
        }
        else if(amount<r.amount){
            if(r.leftchild!=null){
                insertentry(r.leftchild,newEntry,amount);
            }
            else{
                r.leftchild=new Node<>(newEntry,amount);
            }
        }
        else{
            assert amount>r.amount;
            if(r.rightchild!=null){
                insertentry(r.rightchild,newEntry,amount);
            }
            else{
                r.rightchild=new Node<>(newEntry,amount);
            }
        }
        return result;
    }
    public Node max(Node focusnode){
        while (focusnode.rightchild!=null){
            focusnode=focusnode.rightchild;
        }
        return focusnode;
    }
    public Node Min(Node focusnode){
        while(focusnode.leftchild!=null){
            focusnode=focusnode.rightchild;
        }
        return focusnode;
    }
   
    public String toString(){
        return toString(root);
    }
    private String toString(Node r){
        if (r==null){
            return " ";
        }
        System.out.println(toString(r.rightchild));
        System.out.println(toString(r.leftchild));
        return r.toString();
    }
}
