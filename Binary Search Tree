public class BST<T> {
    private class Node{
        T data;
        int value;
        Node leftChild;
        Node rightChild;
        public Node(T initdata,int initvalue){
            data=initdata;
            value=initvalue;
        }
    }
    Node root;
    int size;
    public void insert(T newEntry,int money){
        Node node=new Node(newEntry,money);
        node.data=newEntry;
        node.value=money;
        if(root==null){
            root=node;
        }
        else{
            insert(node,newEntry,money);
        }
        size++;
    }
    private void insert(Node node,T newEntry,int money){
        if(root.value==money){
            node=new Node(newEntry,money);
            node.data=newEntry;
            node.value=money;
        }
        else if(root.value>money){
            if(root.leftChild!=null){
                insert(node, newEntry, money);
            }
            else{
                node.leftChild=new Node(newEntry,money);
                node.data=newEntry;
                node.value=money;
            }
        }
        else{
            if(root.rightChild!=null){
                insert(node,newEntry,money);
            }
            else{
                node.rightChild=new Node(newEntry,money);
                node.data=newEntry;
                node.value=money;
            }
        }
    }
    private Node min(Node focusNode){
        while(focusNode!=null){
            focusNode=focusNode.leftChild;
        }
        return focusNode;
    }
    public void delete(T newEntry,int money){
        Node node=new Node(newEntry,money);
        if(root==null) throw new IllegalStateException();
        else if(root.value>node.value){
            if(root.leftChild!=null){
                delete(node.data,node.value);
            }
        }
        else if(root.value<node.value){
            if(root.rightChild!=null){
                delete(node.data,node.value);
            }
        }
        else{
            if(root.rightChild!=null&&root.leftChild!=null){
                root=min(root);
                delete(root.data,root.value);
            }
            else if(root.leftChild==node){
                root.leftChild = (root.leftChild!=null) ? root.leftChild : root.rightChild;
            }
            else if(root.rightChild==node){
                root.rightChild = (root.rightChild!=null) ? root.leftChild : root.rightChild;
            }
        }
        size--;
    }
}
