import java.util.NoSuchElementException;

public class BST<T> {
    private class Node<T>{
        T data;
        int amount;
        Node leftchild;
        Node rightchild;
        public Node(T dataportion,int initamount){
            data=dataportion;
            amount=initamount;
        }
        public String toString(){
            return " " +amount;
        }
    }
    Node root;
    int size;
    public void insert(T newEntry,int amount){
        Node node=new Node(newEntry,amount);
        node.data=newEntry;
        if(size==0){
               root=node;
        }
        else{
            insertentry(root,newEntry,amount);
        }
        size++;
    }
    private void insertentry(Node r,T newEntry,int amount){

        if(r.amount==amount){
            Node n = root.leftchild;
            n=max(n);
            n.rightchild=new Node(newEntry,amount);
        }
        else if(amount<r.amount){
            if(r.leftchild!=null){
                insertentry(r.leftchild,newEntry,amount);
            }
            else{
                r.leftchild=new Node<>(newEntry,amount);
            }
        }
        else{
            assert amount>r.amount;
            if(r.rightchild!=null){
                insertentry(r.rightchild,newEntry,amount);
            }
            else{
                r.rightchild=new Node<>(newEntry,amount);
            }
        }

    }
    public Node max(Node focusnode){
        while (focusnode.rightchild!=null){
            focusnode=focusnode.rightchild;
        }
        return focusnode;
    }
    public Node Min(Node focusnode){
        while (focusnode.rightchild!=null){
            focusnode=focusnode.rightchild;
        }
        return focusnode;
    }
    public boolean remove(Object dataportion,int value){
        Node r=new Node(dataportion,value);
        if(root==null){ throw new NoSuchElementException();}
        else if(r.amount<root.amount){
            if(root.leftchild!=null){
                remove(r.data,r.amount);
            }
            else{
                return false;
            }
        }
        else if(r.amount>root.amount){
            if(root.rightchild!=null){
                remove(r.data,r.amount);
            }
            else{
                return false;
            }
        }
        else{
            if((root.leftchild!=null)&&(root.rightchild!=null)){
                root=Min(root.rightchild);
                remove(root.data,root.amount);
            }
            else if(root.leftchild==r){
                root.leftchild  = (root.leftchild!=null) ? root.leftchild : root.rightchild;
            }
            else if(root.rightchild==r){
                root.rightchild = (root.leftchild!=null) ? root.leftchild : root.rightchild;
            }
        }
        return true;
    }
    public void inorder(Node focusNode){
        if(focusNode==null){
            return ;
        }
        inorder(focusNode.leftchild);
        System.out.println(focusNode.amount);
        inorder(focusNode.rightchild);
    }
    public void preorder(Node focusNode){
        while (focusNode!=null){
            System.out.println(focusNode);
            preorder(focusNode.leftchild);
            preorder(focusNode.rightchild);
        }
    }
    public void postorder(Node focusNode){
        preorder(focusNode.leftchild);
        preorder(focusNode.rightchild);
        System.out.println(focusNode);
    }
    public String toString(){
        return toString(root);
    }
    private String toString(Node r){
        if (r==null){
            return " ";
        }
        System.out.println(toString(r.rightchild));
        System.out.println(toString(r.leftchild));
        return r.toString();
    }
}

